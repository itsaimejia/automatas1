2020-03-30 17:33:36:797 grammar LogManager.java:25 before: (COMBINED_GRAMMAR binario_decimal (RULES (RULE varios (BLOCK (ALT (+ (BLOCK (ALT convertir)))))) (RULE convertir (BLOCK (ALT (= n BINARIO) {
                String bin = $n.text;
                String [] vect = bin.split("");
                int decimal=0;
                int exp=1;
                for(int i=bin.length()-1; i>=0; i--){
                    decimal+=Integer.parseInt(vect[i])*exp;
                    exp*=2;
                }
                System.out.println(decimal);
            }))) (RULE BINARIO (BLOCK (ALT (+ (BLOCK (ALT [01])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT [ \t\r\n]) skip)))))
2020-03-30 17:33:36:807 grammar LogManager.java:25 after: (COMBINED_GRAMMAR binario_decimal (RULES (RULE varios (BLOCK (ALT (+ (BLOCK (ALT convertir)))))) (RULE convertir (BLOCK (ALT (= n BINARIO) {
                String bin = $n.text;
                String [] vect = bin.split("");
                int decimal=0;
                int exp=1;
                for(int i=bin.length()-1; i>=0; i--){
                    decimal+=Integer.parseInt(vect[i])*exp;
                    exp*=2;
                }
                System.out.println(decimal);
            }))) (RULE BINARIO (BLOCK (ALT (+ (BLOCK (ALT [01])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT [ \t\r\n]) skip)))))
2020-03-30 17:33:36:827 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR binario_decimal (RULES (RULE varios (BLOCK (ALT (+ (BLOCK (ALT convertir)))))) (RULE convertir (BLOCK (ALT (= n BINARIO) {
                String bin = $n.text;
                String [] vect = bin.split("");
                int decimal=0;
                int exp=1;
                for(int i=bin.length()-1; i>=0; i--){
                    decimal+=Integer.parseInt(vect[i])*exp;
                    exp*=2;
                }
                System.out.println(decimal);
            })))))
2020-03-30 17:33:36:827 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR binario_decimalLexer (RULES (RULE BINARIO (BLOCK (ALT (+ (BLOCK (ALT [01])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT [ \t\r\n]) skip)))))
2020-03-30 17:33:37:109 semantics LogManager.java:25 tokens={EOF=-1, BINARIO=1, WS=2}
2020-03-30 17:33:37:109 semantics LogManager.java:25 strings={}
2020-03-30 17:33:37:121 LL1 LogManager.java:25 
DECISION 0 in rule varios
2020-03-30 17:33:37:121 LL1 LogManager.java:25 look=[1, <EOF>]
2020-03-30 17:33:37:121 LL1 LogManager.java:25 LL(1)? true
2020-03-30 17:33:37:144 action-translator LogManager.java:25 translate 
                String bin = $n.text;
                String [] vect = bin.split("");
                int decimal=0;
                int exp=1;
                for(int i=bin.length()-1; i>=0; i--){
                    decimal+=Integer.parseInt(vect[i])*exp;
                    exp*=2;
                }
                System.out.println(decimal);
            
2020-03-30 17:33:37:144 action-translator LogManager.java:25 qattr [@-1,32:32='n',<0>,7:30].[@-1,34:37='text',<0>,7:32]
