2020-03-30 16:41:34:721 grammar LogManager.java:25 before: (COMBINED_GRAMMAR binario_decimal (RULES (RULE varios (BLOCK (ALT (+ (BLOCK (ALT convertir)))))) (RULE convertir (BLOCK (ALT (= n BINARIO) {
                double bin=Integer.parseInt($n.text);
                int pos = 0;
                int decimal = 0;

                while (bin != 0) {
                    int digito = bin % 10;
                    decimal = decimal + digito * (int) Math.pow(2, pos);
                    pos++;
                    bin = bin / 10;
                }

                System.out.println("decimal: "+decimal);
            }))) (RULE BINARIO (BLOCK (ALT (+ (BLOCK (ALT [01])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT [ \t\r\n]) skip)))))
2020-03-30 16:41:34:733 grammar LogManager.java:25 after: (COMBINED_GRAMMAR binario_decimal (RULES (RULE varios (BLOCK (ALT (+ (BLOCK (ALT convertir)))))) (RULE convertir (BLOCK (ALT (= n BINARIO) {
                double bin=Integer.parseInt($n.text);
                int pos = 0;
                int decimal = 0;

                while (bin != 0) {
                    int digito = bin % 10;
                    decimal = decimal + digito * (int) Math.pow(2, pos);
                    pos++;
                    bin = bin / 10;
                }

                System.out.println("decimal: "+decimal);
            }))) (RULE BINARIO (BLOCK (ALT (+ (BLOCK (ALT [01])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT [ \t\r\n]) skip)))))
2020-03-30 16:41:34:754 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR binario_decimal (RULES (RULE varios (BLOCK (ALT (+ (BLOCK (ALT convertir)))))) (RULE convertir (BLOCK (ALT (= n BINARIO) {
                double bin=Integer.parseInt($n.text);
                int pos = 0;
                int decimal = 0;

                while (bin != 0) {
                    int digito = bin % 10;
                    decimal = decimal + digito * (int) Math.pow(2, pos);
                    pos++;
                    bin = bin / 10;
                }

                System.out.println("decimal: "+decimal);
            })))))
2020-03-30 16:41:34:754 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR binario_decimalLexer (RULES (RULE BINARIO (BLOCK (ALT (+ (BLOCK (ALT [01])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT [ \t\r\n]) skip)))))
2020-03-30 16:41:35:106 semantics LogManager.java:25 tokens={EOF=-1, BINARIO=1, WS=2}
2020-03-30 16:41:35:107 semantics LogManager.java:25 strings={}
2020-03-30 16:41:35:119 LL1 LogManager.java:25 
DECISION 0 in rule varios
2020-03-30 16:41:35:119 LL1 LogManager.java:25 look=[1, <EOF>]
2020-03-30 16:41:35:120 LL1 LogManager.java:25 LL(1)? true
2020-03-30 16:41:35:144 action-translator LogManager.java:25 translate 
                double bin=Integer.parseInt($n.text);
                int pos = 0;
                int decimal = 0;

                while (bin != 0) {
                    int digito = bin % 10;
                    decimal = decimal + digito * (int) Math.pow(2, pos);
                    pos++;
                    bin = bin / 10;
                }

                System.out.println("decimal: "+decimal);
            
2020-03-30 16:41:35:144 action-translator LogManager.java:25 qattr [@-1,47:47='n',<0>,6:45].[@-1,49:52='text',<0>,6:47]
